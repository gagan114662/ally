name: Audit Proof

on:
  pull_request:
    branches: [ main, 'release/**', 'phase-*', 'M-*' ]
  push:
    branches:   [ main, 'release/**', 'phase-*', 'M-*' ]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: write

jobs:
  audit-proof:
    runs-on: ubuntu-latest

    env:
      ALLY_LIVE: "0"
      TZ: "UTC"
      PYTHONHASHSEED: "0"
      OMP_NUM_THREADS: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install minimal deps (best-effort)
        run: |
          python -m pip install --upgrade pip || true
          # Add any lightweight deps your CLI needs; keep offline-safe where possible
          pip install orjson|| true

      - name: Deterministic Test Battery
        run: scripts/ci_deterministic_test_battery.sh

      - name: Upload CI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ally-ci-artifacts
          if-no-files-found: error
          path: |
            artifacts/audit_check_ci.json
            artifacts/audit_check.json
            artifacts/chat/transcript_ci.jsonl
            artifacts/receipts.jsonl
            artifacts/**/*.json
            artifacts/**/*.txt
            artifacts/**/*.xml
            artifacts/**/*.log

      - name: Post sticky PROOF comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            function sha16(p){ return fs.existsSync(p) ? require('crypto').createHash('sha1').update(fs.readFileSync(p)).digest('hex').slice(0,16) : 'missing'; }
            const audit = 'artifacts/audit_check_ci.json';
            const transcript = 'artifacts/chat/transcript_ci.jsonl';
            const proofRun = `PROOF:run:chatgpt.verify@${sha16(audit)}:${sha16(transcript)}`;
            const body = [
              '## ðŸ¤– ChatGPT Audit',
              '',
              '**Artifacts**',
              `- audit: \`${audit}\` (sha1:${sha16(audit)})`,
              `- transcript: \`${transcript}\` (sha1:${sha16(transcript)})`,
              '',
              '**PROOF**',
              `- ${proofRun}`,
              '',
              '_Deterministic: ALLY_LIVE=0, TZ=UTC, single-threaded_'
            ].join('\n');
            const {owner, repo} = context.repo;
            const issue_number = context.payload.pull_request.number;
            // upsert sticky comment
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
            const marker = 'ðŸ¤– ChatGPT Audit';
            const existing = comments.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }