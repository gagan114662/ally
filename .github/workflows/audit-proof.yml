name: ChatGPT Audit & Proof

on:
  push:
    branches: [ main, 'release/**', 'phase-*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  audit:
    name: Run deterministic chat + audit
    runs-on: ubuntu-latest
    env:
      ALLY_LIVE: "0"
      TZ: "UTC"
      PYTHONHASHSEED: "0"
      OMP_NUM_THREADS: "1"
      MKL_NUM_THREADS: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install duckdb ruff mypy pytest pytest-cov || true

      - name: Run deterministic test battery
        run: |
          bash scripts/run_deterministic_build.sh

      - name: Validate artifacts presence
        run: |
          test -s artifacts/audit_check_ci.json
          test -s artifacts/chat/transcript_ci.jsonl

      - name: Upload CI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: |
            artifacts/ci/junit.xml
            artifacts/ci/coverage.xml
            artifacts/ci/pytest_stdout.txt
            artifacts/chat/transcript_ci.jsonl
            artifacts/audit_check_ci.json
            artifacts/receipts.jsonl

      - name: Extract auditor proof line
        id: proof
        run: |
          # Extract master proof from audit JSON
          MASTER_PROOF=$(python -c "import json; j=json.load(open('artifacts/audit_check_ci.json')); print(j.get('master_proof', ''))")
          if [ -n "$MASTER_PROOF" ]; then
            LINE="PROOF:run:chatgpt.verify@${MASTER_PROOF:0:8}:${MASTER_PROOF:8:16}"
          else
            # fallback: compute from verification report
            HEX=$(sha256sum verification_report.json | awk '{print $1}' || echo "fallback0000000000000000")
            LINE="PROOF:run:chatgpt.verify@${HEX:0:8}:${HEX:8:16}"
          fi
          echo "line=$LINE" >> $GITHUB_OUTPUT
          echo "$LINE"

      - name: Check audit OK (fail if mismatches)
        run: |
          python - <<'PY'
import json, sys
j = json.load(open("artifacts/audit_check_ci.json"))
missing = j.get("missing", 0)
mismatches = j.get("mismatches", 0)
ok = j.get("ok", False)
print(f"[AUDIT] missing={missing} mismatches={mismatches} ok={ok}")
print(f"[AUDIT] total_files={j.get('total_files', 0)}")
sys.exit(0 if (ok and missing == 0 and mismatches == 0) else 1)
PY

      - name: Post sticky proof comment
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PROOF_LINE: ${{ steps.proof.outputs.line }}
        run: |
          BODY="# ðŸ¤– ChatGPT Audit\n\n- ${PROOF_LINE}\n- Deterministic transcript: \`artifacts/chat/transcript_ci.jsonl\`\n- Full audit: \`artifacts/audit_check_ci.json\`"
          # delete prior bot comment (by marker) to keep it sticky & single
          gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            | jq -r '.[] | select(.user.type=="Bot") | select(.body|test("ChatGPT Audit")) | .id' \
            | xargs -I{} gh api repos/${{ github.repository }}/issues/comments/{} -X DELETE || true
          gh pr comment $PR_NUMBER --body "$BODY"