name: M-QC Canary
on:
  schedule:
    - cron: "17 3 * * *"   # daily at 03:17 UTC
  workflow_dispatch: {}

jobs:
  canary:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      TZ: UTC
      MPLBACKEND: Agg
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11", cache: "pip" }
      - name: Install Ally + Lean
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install lean
      - name: Run Canary
        run: |
          python scripts/emit_proofs_mqc_canary.py
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: canary-proof-bundle
          path: canary-proof-bundle
      - name: Comment PROOF on last canary issue (or create)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const proofs = JSON.parse(fs.readFileSync('canary-proof-bundle/canary_proofs.json','utf8'));
            const lines = [
              `PROOF:QC_CANARY: ${proofs.canary_ok ? 'ok' : 'fail'}`,
              `PROOF:QC_CANARY_HASH: ${proofs.canary_hash}`,
              proofs.diff === null ? 'PROOF:QC_CANARY_DIFF: baseline_unset' : `PROOF:QC_CANARY_DIFF: ${proofs.diff ? 1 : 0}`,
              `Symbols: ${proofs.symbols.join(', ')}`,
              `Window: ${proofs.window.start} â†’ ${proofs.window.end}`
            ];
            // Find (or create) a pinned "QC Canary" issue
            const { data: issues } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} is:issue in:title "QC Canary"`
            });
            let issue_number;
            if (issues.items && issues.items.length > 0) {
              issue_number = issues.items[0].number;
            } else {
              const created = await github.rest.issues.create({
                owner: context.repo.owner, repo: context.repo.repo,
                title: "QC Canary (Nightly Drift Watch)",
                body: "This issue collects nightly PROOF lines for the QuantConnect canary."
              });
              issue_number = created.data.number;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo, issue_number,
              body: ['### Nightly M-QC Canary PROOFS','','```',...lines,'```'].join('\n')
            });