name: CI
on:
  push: { branches: [ main ] }
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: {}
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Pytest
        run: pytest -q --maxfail=1 --disable-warnings --cov=ally --cov-report=xml
      - name: Verify claims (optional)
        run: |
          python - <<'PY'
          import importlib.util, subprocess, sys
          if importlib.util.find_spec("ally.verify.verify_claims"):
              sys.exit(subprocess.call([sys.executable,"-m","ally.verify.verify_claims"]))
          print("No verification pack; skipping.")
          PY
      - name: Upload traces on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with: { name: traces, path: runs/_traces/** }
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with: { name: coverage-xml, path: coverage.xml }

  m9:
    name: M9 (Orchestrator)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      MPLBACKEND: Agg
      PYTHONUNBUFFERED: "1"
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Run M9 tests only
        run: |
          pytest -q -m m9 --disable-warnings --maxfail=1

      - name: Proof bundle (orchestrator)
        run: |
          python - <<'PY'
          import json, hashlib, os
          from ally.tools import TOOL_REGISTRY
          # 1) Run orchestrator with a deterministic config (fixtures only, no network)
          args = {
            "experiment_id":"EXP_demo",
            "symbols":["BTCUSDT"],
            "interval":"1h",
            "lookback":600,
            "targets":{"annual_return":0.10,"sharpe_ratio":1.0},
            "risk_policy_yaml":"max_leverage: 3.0\nmax_single_order_notional: 25000",
            "save_run":True,
            "make_report":True
          }
          res = TOOL_REGISTRY["orchestrator.run"](**args)
          summary = res.data if hasattr(res,'data') else res
          # 2) Hash the OrchSummary JSON deterministically
          s = json.dumps(summary, sort_keys=True).encode()
          orch_hash = hashlib.sha1(s).hexdigest()
          run_id = summary.get("run_id","")
          report_path = summary.get("report_path","")
          # 3) Query memory to confirm persistence
          q = TOOL_REGISTRY["memory.query"](table="runs")
          rows = q.data["rows"] if hasattr(q,'data') else q.rows
          matching_rows = [r for r in rows if r.get("run_id") == run_id]
          proofs = {
            "ORCH_SUMMARY_HASH": orch_hash,
            "ORCH_RUN_ID": run_id,
            "REPORT_PATH": report_path,
            "MEMORY_ROWS": len(matching_rows)
          }
          for k,v in proofs.items():
            print(f"PROOF:{k}: {json.dumps(v) if not isinstance(v,str) else v}")
          os.makedirs("artifacts", exist_ok=True)
          with open("artifacts/orch_proofs.json","w") as f:
            json.dump(proofs, f, indent=2)
          PY

      - name: Upload M9 proof artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: orch-proof-bundle
          path: |
            artifacts/orch_proofs.json
            reports/**/*.html

      - name: Comment PROOF lines to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = 'artifacts/orch_proofs.json';
            if (!fs.existsSync(p)) { core.warning('No orch_proofs.json'); return; }
            const proofs = JSON.parse(fs.readFileSync(p,'utf8'));
            const lines = Object.entries(proofs).map(([k,v]) => `PROOF:${k}: ${typeof v==='string'?v:JSON.stringify(v)}`);
            const body = ['### M9 Proof Bundle (from CI)','', '```', ...lines, '```'].join('\n');
            const number = context.payload.pull_request?.number || context.issue.number;
            if (!number) { core.warning('No PR number'); return; }
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: number, body });