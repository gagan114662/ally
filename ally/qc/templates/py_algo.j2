# Auto-generated QuantConnect Algorithm - {{ class_name }}
# Generated by Ally M-QC (QuantConnect Gate) at {{ timestamp }}

from AlgorithmImports import *

class {{ class_name }}(QCAlgorithm):
    """
    {{ description }}
    
    Strategy: {{ strategy }}
    Symbols: {{ symbols|join(', ') }}
    """
    
    def Initialize(self):
        """Initialize algorithm settings and data subscriptions"""
        # Time period
        self.SetStartDate({{ start_year }}, {{ start_month }}, {{ start_day }})
        self.SetEndDate({{ end_year }}, {{ end_month }}, {{ end_day }})
        
        # Capital and brokerage
        self.SetCash({{ initial_cash }})
        self.SetBrokerageModel(BrokerageName.InteractiveBrokersBrokerage, AccountType.Margin)
        
        # Portfolio settings
        self.SetWarmUp({{ warmup_bars }})
        
        # Add securities
        {%- for symbol in symbols %}
        self.{{ symbol.lower() }} = self.AddEquity("{{ symbol }}", Resolution.{{ resolution }}).Symbol
        {%- endfor %}
        
        # Initialize indicators
        {%- for indicator in indicators %}
        self.{{ indicator.name }} = self.{{ indicator.type }}({{ indicator.period }}{% if indicator.selector %}, {{ indicator.selector }}{% endif %})
        {%- endfor %}
        
        # Schedule events
        self.Schedule.On(self.DateRules.EveryDay("{{ symbols[0] }}"), 
                        self.TimeRules.AfterMarketOpen("{{ symbols[0] }}", 30), 
                        self.RebalancePortfolio)
        
        self.Log(f"Algorithm initialized with {len(self.Securities)} securities")
    
    def OnData(self, data: Slice) -> None:
        """Process new data slice"""
        # Skip if warming up
        if self.IsWarmingUp:
            return
            
        # Update custom indicators
        for symbol in data.Bars.Keys:
            {%- for indicator in indicators %}
            if symbol in data.Bars and data.Bars[symbol] is not None:
                self.{{ indicator.name }}.Update(data.Bars[symbol])
            {%- endfor %}
        
        # Execute trading logic
        {%- if trade_logic %}
        {{ trade_logic|indent(8, first=False) }}
        {%- else %}
        # Default: Buy and hold first symbol
        if not self.Portfolio.Invested and data.Bars.ContainsKey(self.{{ symbols[0].lower() }}):
            self.MarketOrder(self.{{ symbols[0].lower() }}, 100)
            self.Log(f"Purchased 100 shares of {{ symbols[0] }} at {self.Time}")
        {%- endif %}
    
    def RebalancePortfolio(self) -> None:
        """Scheduled rebalancing logic"""
        {%- if rebalance_logic %}
        {{ rebalance_logic|indent(8, first=False) }}
        {%- else %}
        # Default: log portfolio value
        self.Log(f"Portfolio value: {self.Portfolio.TotalPortfolioValue:,.2f}")
        {%- endif %}
    
    def OnOrderEvent(self, orderEvent: OrderEvent) -> None:
        """Handle order events"""
        if orderEvent.Status == OrderStatus.Filled:
            order = self.Transactions.GetOrderById(orderEvent.OrderId)
            self.Log(f"Order filled: {order.Symbol} {order.Quantity} @ {orderEvent.FillPrice}")
    
    def OnEndOfDay(self, symbol: Symbol) -> None:
        """End of day processing"""
        # Log daily performance
        if symbol == self.{{ symbols[0].lower() }}:
            perf = self.Portfolio.TotalUnrealizedProfit
            self.Log(f"End of day - Unrealized P&L: {perf:,.2f}")